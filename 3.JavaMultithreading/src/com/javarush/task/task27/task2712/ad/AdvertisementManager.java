package com.javarush.task.task27.task2712.ad;

/*

Нам понадобится исключение, которое поможет обработать ситуацию,
если у нас не будет получаться подобрать рекламные ролики.
Нам понадобится исключение, которое поможет обработать ситуацию,
 если у нас не будет получаться подобрать рекламные ролики.


2. Разберем подробно метод void processVideos() в AdvertisementManager.

2.1. Удаляем из него вывод в консоль «calling processVideos method» +++
Метод должен:

2.2. Подобрать список видео из доступных, просмотр которых обеспечивает максимальную выгоду.
(Пока делать не нужно, сделаем позже). +++

2.3. Если нет рекламных видео, которые можно показать посетителю,
 то бросить NoVideoAvailableException, которое перехватить в оптимальном месте
 (подумать, где это место) и с уровнем Level.INFO логировать фразу
 «No video is available for the order » + order
 ++++


 2.4. Отобразить все рекламные ролики, отобранные для показа,
 в порядке уменьшения стоимости показа одного рекламного ролика в копейках.
 Вторичная сортировка — по увеличению стоимости показа одной секунды рекламного
 ролика в тысячных частях копейки.
Используйте метод Collections.sort
(Тоже пока делать не нужно, сделаем позже).

Пример для заказа [Water]:
First Video is displaying... 50, 277
где First Video — название рекламного ролика
где 50 — стоимость показа одного рекламного ролика в копейках
где 277 — стоимость показа одной секунды рекламного ролика в тысячных частях копейки (равно 0.277 коп)
Используйте методы из класса Advertisement.


2.5. В классе Advertisement создайте метод void revalidate(). Этот метод должен:
2.5.1. Бросать UnsupportedOperationException, если количество показов не положительное число.
2.5.2. Уменьшать количество показов.


=============================================================================================
Рекурсию используют тогда,
когда алгоритм решения задачи совпадает с алгоритмом решения подзадачи (части).
У нас как раз такой случай.
 Нам нужно сделать полный перебор всех вариантов и выбрать из них лучший.

Напомню, рекурсия пишется по следующему принципу:
а) условие выхода/окончания рекурсии
б) условие продолжения — вызов самой себя с набором параметров предыдущего шага.
В любое время ты можешь почитать в инете подробную информацию по написанию рекурсии.

Текущее задание — реализовать п.2.2 предыдущего задания с помощью рекурсии.
(2.2. Подобрать список видео из доступных, просмотр которых обеспечивает максимальную выгоду.)

(подобрать список видео из доступных, просмотр которых обеспечивает максимальную выгоду)
Рекурсивный метод должен выбрать набор рекламных роликов, которые будут показаны посетителю.

Этот набор должен удовлетворять следующим требованиям:
1. сумма денег, полученная от показов, должна быть максимальной из всех возможных вариантов

2. общее время показа рекламных роликов НЕ должно превышать
время приготовления блюд для текущего заказа;

3. для одного заказа любой видео-ролик показывается не более одного раза;

4. если существует несколько вариантов набора видео-роликов с одинаковой суммой денег,
 полученной от показов, то:

4.1. выбрать тот вариант, у которого суммарное время максимальное;

4.2. если суммарное время у этих вариантов одинаковое,
то выбрать вариант с минимальным количеством роликов;

5. количество показов у любого рекламного ролика из набора — положительное число.

При локальном тестировании учитывайте, что необходимо отобразить все рекламные ролики,
отобранные для показа, в порядке уменьшения стоимости показа одного рекламного ролика в копейках.

Также не забудь реализовать п.2.4 из предыдущего задания (вывести на экран все подходящие ролики).

Для каждого показанного видео-ролика должен быть вызван метод revalidate().

* */


import java.util.*;

public class AdvertisementManager {
    private final AdvertisementStorage storage = AdvertisementStorage.getInstance();
    private int timeSeconds; // время для приготовления в секундах

    private List<Integer> durations = new ArrayList<>();

    public AdvertisementManager(int timeSeconds) {
        this.timeSeconds = timeSeconds;
    }

    public void processVideos() {
        if (storage.list().isEmpty())
            throw new NoVideoAvailableException();

        List<Advertisement> videos = storage.list();

        for (Advertisement video : videos) {
            durations.add(video.getDuration());
        }

        Integer[] array = new Integer[durations.size()];
        durations.toArray(array);
        Arrays.sort(array);
        System.out.println(Arrays.toString(array));

    }

    public int process(int index) {
        if (index == 0) {
            return durations.get(index);
        }
        return process(index) + process(index - 1);
    }

    public static void main(String[] args) {
        new AdvertisementManager(45).processVideos();
    }
}
